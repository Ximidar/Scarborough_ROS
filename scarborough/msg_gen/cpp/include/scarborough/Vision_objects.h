/* Auto-generated by genmsg_cpp for file /home/ubuntu/workspace/sandbox/scarborough/msg/Vision_objects.msg */
#ifndef SCARBOROUGH_MESSAGE_VISION_OBJECTS_H
#define SCARBOROUGH_MESSAGE_VISION_OBJECTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace scarborough
{
template <class ContainerAllocator>
struct Vision_objects_ {
  typedef Vision_objects_<ContainerAllocator> Type;

  Vision_objects_()
  : object()
  , color()
  , rotation()
  {
    rotation.assign(0.0);
  }

  Vision_objects_(const ContainerAllocator& _alloc)
  : object(_alloc)
  , color(_alloc)
  , rotation()
  {
    rotation.assign(0.0);
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  object;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _color_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  color;

  typedef boost::array<float, 3>  _rotation_type;
  boost::array<float, 3>  rotation;


  typedef boost::shared_ptr< ::scarborough::Vision_objects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scarborough::Vision_objects_<ContainerAllocator>  const> ConstPtr;
}; // struct Vision_objects
typedef  ::scarborough::Vision_objects_<std::allocator<void> > Vision_objects;

typedef boost::shared_ptr< ::scarborough::Vision_objects> Vision_objectsPtr;
typedef boost::shared_ptr< ::scarborough::Vision_objects const> Vision_objectsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::scarborough::Vision_objects_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::scarborough::Vision_objects_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace scarborough

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::scarborough::Vision_objects_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::scarborough::Vision_objects_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::scarborough::Vision_objects_<ContainerAllocator> > {
  static const char* value() 
  {
    return "434cb4ca12d6ae62eab8601c42fd4e45";
  }

  static const char* value(const  ::scarborough::Vision_objects_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x434cb4ca12d6ae62ULL;
  static const uint64_t static_value2 = 0xeab8601c42fd4e45ULL;
};

template<class ContainerAllocator>
struct DataType< ::scarborough::Vision_objects_<ContainerAllocator> > {
  static const char* value() 
  {
    return "scarborough/Vision_objects";
  }

  static const char* value(const  ::scarborough::Vision_objects_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::scarborough::Vision_objects_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string object\n\
string color\n\
float32[3] rotation\n\
 \n\
";
  }

  static const char* value(const  ::scarborough::Vision_objects_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::scarborough::Vision_objects_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.object);
    stream.next(m.color);
    stream.next(m.rotation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Vision_objects_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scarborough::Vision_objects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::scarborough::Vision_objects_<ContainerAllocator> & v) 
  {
    s << indent << "object: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object);
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.color);
    s << indent << "rotation[]" << std::endl;
    for (size_t i = 0; i < v.rotation.size(); ++i)
    {
      s << indent << "  rotation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rotation[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SCARBOROUGH_MESSAGE_VISION_OBJECTS_H

