/* Auto-generated by genmsg_cpp for file /home/ubuntu/workspace/sandbox/scarborough/msg/Depth.msg */
#ifndef SCARBOROUGH_MESSAGE_DEPTH_H
#define SCARBOROUGH_MESSAGE_DEPTH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace scarborough
{
template <class ContainerAllocator>
struct Depth_ {
  typedef Depth_<ContainerAllocator> Type;

  Depth_()
  : depth(0.0)
  {
  }

  Depth_(const ContainerAllocator& _alloc)
  : depth(0.0)
  {
  }

  typedef float _depth_type;
  float depth;


  typedef boost::shared_ptr< ::scarborough::Depth_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scarborough::Depth_<ContainerAllocator>  const> ConstPtr;
}; // struct Depth
typedef  ::scarborough::Depth_<std::allocator<void> > Depth;

typedef boost::shared_ptr< ::scarborough::Depth> DepthPtr;
typedef boost::shared_ptr< ::scarborough::Depth const> DepthConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::scarborough::Depth_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::scarborough::Depth_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace scarborough

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::scarborough::Depth_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::scarborough::Depth_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::scarborough::Depth_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6deb06b7b7183f5581b3362a0cb413b7";
  }

  static const char* value(const  ::scarborough::Depth_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6deb06b7b7183f55ULL;
  static const uint64_t static_value2 = 0x81b3362a0cb413b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::scarborough::Depth_<ContainerAllocator> > {
  static const char* value() 
  {
    return "scarborough/Depth";
  }

  static const char* value(const  ::scarborough::Depth_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::scarborough::Depth_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 depth\n\
";
  }

  static const char* value(const  ::scarborough::Depth_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::scarborough::Depth_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::scarborough::Depth_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.depth);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Depth_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scarborough::Depth_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::scarborough::Depth_<ContainerAllocator> & v) 
  {
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SCARBOROUGH_MESSAGE_DEPTH_H

