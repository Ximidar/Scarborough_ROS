/* Auto-generated by genmsg_cpp for file /home/ubuntu/workspace/sandbox/scarborough/msg/Motor_Speed.msg */
#ifndef SCARBOROUGH_MESSAGE_MOTOR_SPEED_H
#define SCARBOROUGH_MESSAGE_MOTOR_SPEED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace scarborough
{
template <class ContainerAllocator>
struct Motor_Speed_ {
  typedef Motor_Speed_<ContainerAllocator> Type;

  Motor_Speed_()
  : motor()
  {
    motor.assign(0);
  }

  Motor_Speed_(const ContainerAllocator& _alloc)
  : motor()
  {
    motor.assign(0);
  }

  typedef boost::array<int32_t, 6>  _motor_type;
  boost::array<int32_t, 6>  motor;


  typedef boost::shared_ptr< ::scarborough::Motor_Speed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scarborough::Motor_Speed_<ContainerAllocator>  const> ConstPtr;
}; // struct Motor_Speed
typedef  ::scarborough::Motor_Speed_<std::allocator<void> > Motor_Speed;

typedef boost::shared_ptr< ::scarborough::Motor_Speed> Motor_SpeedPtr;
typedef boost::shared_ptr< ::scarborough::Motor_Speed const> Motor_SpeedConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::scarborough::Motor_Speed_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::scarborough::Motor_Speed_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace scarborough

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::scarborough::Motor_Speed_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::scarborough::Motor_Speed_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::scarborough::Motor_Speed_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f5f634e2dbc972b6b32d53a35c45b514";
  }

  static const char* value(const  ::scarborough::Motor_Speed_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf5f634e2dbc972b6ULL;
  static const uint64_t static_value2 = 0xb32d53a35c45b514ULL;
};

template<class ContainerAllocator>
struct DataType< ::scarborough::Motor_Speed_<ContainerAllocator> > {
  static const char* value() 
  {
    return "scarborough/Motor_Speed";
  }

  static const char* value(const  ::scarborough::Motor_Speed_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::scarborough::Motor_Speed_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32[6] motor\n\
\n\
";
  }

  static const char* value(const  ::scarborough::Motor_Speed_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::scarborough::Motor_Speed_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::scarborough::Motor_Speed_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.motor);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Motor_Speed_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scarborough::Motor_Speed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::scarborough::Motor_Speed_<ContainerAllocator> & v) 
  {
    s << indent << "motor[]" << std::endl;
    for (size_t i = 0; i < v.motor.size(); ++i)
    {
      s << indent << "  motor[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SCARBOROUGH_MESSAGE_MOTOR_SPEED_H

