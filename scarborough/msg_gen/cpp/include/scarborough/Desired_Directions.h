/* Auto-generated by genmsg_cpp for file /home/ubuntu/workspace/sandbox/scarborough/msg/Desired_Directions.msg */
#ifndef SCARBOROUGH_MESSAGE_DESIRED_DIRECTIONS_H
#define SCARBOROUGH_MESSAGE_DESIRED_DIRECTIONS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace scarborough
{
template <class ContainerAllocator>
struct Desired_Directions_ {
  typedef Desired_Directions_<ContainerAllocator> Type;

  Desired_Directions_()
  : address(0)
  , value(0)
  {
  }

  Desired_Directions_(const ContainerAllocator& _alloc)
  : address(0)
  , value(0)
  {
  }

  typedef int32_t _address_type;
  int32_t address;

  typedef int32_t _value_type;
  int32_t value;


  typedef boost::shared_ptr< ::scarborough::Desired_Directions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scarborough::Desired_Directions_<ContainerAllocator>  const> ConstPtr;
}; // struct Desired_Directions
typedef  ::scarborough::Desired_Directions_<std::allocator<void> > Desired_Directions;

typedef boost::shared_ptr< ::scarborough::Desired_Directions> Desired_DirectionsPtr;
typedef boost::shared_ptr< ::scarborough::Desired_Directions const> Desired_DirectionsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::scarborough::Desired_Directions_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::scarborough::Desired_Directions_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace scarborough

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::scarborough::Desired_Directions_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::scarborough::Desired_Directions_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::scarborough::Desired_Directions_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f1d1f76242de856e3a44fa6454dab1b8";
  }

  static const char* value(const  ::scarborough::Desired_Directions_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf1d1f76242de856eULL;
  static const uint64_t static_value2 = 0x3a44fa6454dab1b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::scarborough::Desired_Directions_<ContainerAllocator> > {
  static const char* value() 
  {
    return "scarborough/Desired_Directions";
  }

  static const char* value(const  ::scarborough::Desired_Directions_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::scarborough::Desired_Directions_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 address\n\
int32 value\n\
\n\
";
  }

  static const char* value(const  ::scarborough::Desired_Directions_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::scarborough::Desired_Directions_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::scarborough::Desired_Directions_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.address);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Desired_Directions_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scarborough::Desired_Directions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::scarborough::Desired_Directions_<ContainerAllocator> & v) 
  {
    s << indent << "address: ";
    Printer<int32_t>::stream(s, indent + "  ", v.address);
    s << indent << "value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SCARBOROUGH_MESSAGE_DESIRED_DIRECTIONS_H

