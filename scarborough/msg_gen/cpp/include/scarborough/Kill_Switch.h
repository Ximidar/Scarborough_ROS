/* Auto-generated by genmsg_cpp for file /home/ros/workspace/sandbox/Scarborough_ROS/scarborough/msg/Kill_Switch.msg */
#ifndef SCARBOROUGH_MESSAGE_KILL_SWITCH_H
#define SCARBOROUGH_MESSAGE_KILL_SWITCH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace scarborough
{
template <class ContainerAllocator>
struct Kill_Switch_ {
  typedef Kill_Switch_<ContainerAllocator> Type;

  Kill_Switch_()
  : killed(false)
  {
  }

  Kill_Switch_(const ContainerAllocator& _alloc)
  : killed(false)
  {
  }

  typedef uint8_t _killed_type;
  uint8_t killed;


  typedef boost::shared_ptr< ::scarborough::Kill_Switch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scarborough::Kill_Switch_<ContainerAllocator>  const> ConstPtr;
}; // struct Kill_Switch
typedef  ::scarborough::Kill_Switch_<std::allocator<void> > Kill_Switch;

typedef boost::shared_ptr< ::scarborough::Kill_Switch> Kill_SwitchPtr;
typedef boost::shared_ptr< ::scarborough::Kill_Switch const> Kill_SwitchConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::scarborough::Kill_Switch_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::scarborough::Kill_Switch_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace scarborough

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::scarborough::Kill_Switch_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::scarborough::Kill_Switch_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::scarborough::Kill_Switch_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b9ba423f2d72a3fad589a8f863963a01";
  }

  static const char* value(const  ::scarborough::Kill_Switch_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb9ba423f2d72a3faULL;
  static const uint64_t static_value2 = 0xd589a8f863963a01ULL;
};

template<class ContainerAllocator>
struct DataType< ::scarborough::Kill_Switch_<ContainerAllocator> > {
  static const char* value() 
  {
    return "scarborough/Kill_Switch";
  }

  static const char* value(const  ::scarborough::Kill_Switch_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::scarborough::Kill_Switch_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool killed\n\
";
  }

  static const char* value(const  ::scarborough::Kill_Switch_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::scarborough::Kill_Switch_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::scarborough::Kill_Switch_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.killed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct Kill_Switch_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scarborough::Kill_Switch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::scarborough::Kill_Switch_<ContainerAllocator> & v) 
  {
    s << indent << "killed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.killed);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SCARBOROUGH_MESSAGE_KILL_SWITCH_H

