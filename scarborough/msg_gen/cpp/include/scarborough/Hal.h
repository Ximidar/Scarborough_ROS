/* Auto-generated by genmsg_cpp for file /home/ros/workspace/sandbox/Scarborough_ROS/scarborough/msg/Hal.msg */
#ifndef SCARBOROUGH_MESSAGE_HAL_H
#define SCARBOROUGH_MESSAGE_HAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace scarborough
{
template <class ContainerAllocator>
struct Hal_ {
  typedef Hal_<ContainerAllocator> Type;

  Hal_()
  : state()
  {
  }

  Hal_(const ContainerAllocator& _alloc)
  : state(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  state;


  typedef boost::shared_ptr< ::scarborough::Hal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scarborough::Hal_<ContainerAllocator>  const> ConstPtr;
}; // struct Hal
typedef  ::scarborough::Hal_<std::allocator<void> > Hal;

typedef boost::shared_ptr< ::scarborough::Hal> HalPtr;
typedef boost::shared_ptr< ::scarborough::Hal const> HalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::scarborough::Hal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::scarborough::Hal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace scarborough

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::scarborough::Hal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::scarborough::Hal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::scarborough::Hal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "af6d3a99f0fbeb66d3248fa4b3e675fb";
  }

  static const char* value(const  ::scarborough::Hal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaf6d3a99f0fbeb66ULL;
  static const uint64_t static_value2 = 0xd3248fa4b3e675fbULL;
};

template<class ContainerAllocator>
struct DataType< ::scarborough::Hal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "scarborough/Hal";
  }

  static const char* value(const  ::scarborough::Hal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::scarborough::Hal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string state\n\
";
  }

  static const char* value(const  ::scarborough::Hal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::scarborough::Hal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct Hal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scarborough::Hal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::scarborough::Hal_<ContainerAllocator> & v) 
  {
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SCARBOROUGH_MESSAGE_HAL_H

