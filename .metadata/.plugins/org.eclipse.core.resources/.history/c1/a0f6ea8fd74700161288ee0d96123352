/*
 * hal.h
 *
 *  Created on: Feb 25, 2016
 *      Author: sdcr
 */

/*
 * Hal9000 was the futuristic machine off of the movie "2001:A Space Oddysey"
 * This Hal is the State machine that will take in all information from the other
 * processes and then decide what the entire machine should do. All debug messages
 * from this program should be "I Can't do that Dave" Hopefully a Dave will work on
 * this code in the future and get really freaked out by it.
 */
#ifndef HAL_H_
#define HAL_H_

#include <iostream>
#include "ros/ros.h"
#include "scarborough/Desired_Directions"
#include "scarborough/YPR.h"
#include "scarborough/Kill_Switch.h"
#include "scarborough/Depth.h"



using namespace std;
// TODO include data types here.
#define YAW 0
#define PITCH 1
#define ROLL 2
#define DEPTH 3


class Hal{
	public:
		Hal();
		void init();
		void collection(); //collect all information. This means all imu data, vision data, and depth data.
		void process(); //process what the information means, for example if we find an orange square and an obstacle we want to go to the obstacle
		void decide(); // Decide will actually change the state of the machine.
		void update_desired(int address, int value); // updates desired ypr

		//different states
		enum Hal_State {
			MAINTAIN_HDD,
			UPDATE_HDD,

			//GATE
			GATE_DETECT,
			GATE_FINISH,

			//BOUY
			BOUY_BUMP,
			BACKUP,
			BOUY_SEARCH,
			BOUY_FINISH
		};

	private:
		ros::NodeHandle n;
		ros::Publisher desired_direction;
		ros::Subscriber current_direction;
		scarborough::Desired_Directions directions;


};



#endif /* HAL_H_ */
